frontend fe_hockeypuck_ddos_lb
    bind abns@hockeypuck-ddos accept-proxy
    mode http

    # Check for valid vhost names
    acl keyserver_host      hdr_beg(host) -i "${FQDN}"
    acl keyserver_host      hdr(host),lower,map_beg("${HAP_CONF_DIR}"/lists/aliases.map) -m found

    # hockeypuck settings
    acl get_pks_lookup     path_beg /pks/lookup
    acl post_pks_add       path_beg /pks/add
    acl post_pks_delete    path_beg /pks/delete
    acl post_pks_hashquery path_beg /pks/hashquery
    acl post_pks_replace   path_beg /pks/replace
    acl pks_op_get         query    -i -m sub op=get
    acl pks_op_stats       query    -i -m sub op=stats
    acl pks_options_fprint query    -i -m sub fingerprint=on
    acl pks_options_mr     query    -i -m sub options=mr
    acl get_webroot        path_beg /

    # Tor exit nodes
    # These should be refreshed on a schedule using an external script.
    # After updating, haproxy should be refreshed using the graceful method described at
    # https://www.haproxy.com/blog/hitless-reloads-with-haproxy-howto/
    acl is_tor_exit_relay   hdr_ip(CF-Connecting-IP) -f "${HAP_CACHE_DIR}"/tor_exit_relays.list

    tcp-request inspect-delay 5s
    tcp-request content accept if HTTP

    http-request capture hdr(Host) len 253
    http-request capture hdr_ip(CF-Connecting-IP) len 64

    # ~ Tor exit relay nodes rules ~
    # Track request and connection rate for Tor exit nodes to POST /pks/add
    http-request track-sc0 str(TOR_EXIT_RELAY) table st_tor_request_rate if is_tor_exit_relay keyserver_host post_pks_add METH_POST
    http-request track-sc1 hdr_ip(CF-Connecting-IP) table st_tor_24h_ban if is_tor_exit_relay keyserver_host post_pks_add METH_POST
    http-request track-sc2 hdr_ip(CF-Connecting-IP) table st_tor_24days_ban if is_tor_exit_relay keyserver_host post_pks_add METH_POST

    # Apply rate limiting for Tor exit nodes
    acl tor_request_rate_limit sc0_inc_gpc0(st_tor_request_rate) gt 2
    acl tor_conn_count         sc0_conn_cur(st_tor_request_rate) gt 1
    acl tor_conn_rate_limit    sc0_conn_rate(st_tor_request_rate) gt 1

    # Check if the IP is already banned
    acl tor_ip_24h_banned      sc1_get_gpc0(st_tor_24h_ban) gt 0
    acl tor_ip_1month_banned   sc2_get_gpc0(st_tor_24days_ban) gt 0

    # Increment the gpc0 counter in the 1-month ban stick table if the IP attempts another request
    # within the 24h or 1-month ban period and block the request
    http-request sc-inc-gpc0(2) if tor_ip_1month_banned
    http-request deny deny_status 429 hdr Denial-Reason "This Tor exit relay is a repeat offender used in DDoS attack on this service. Hard ban enforced for 1 month." if tor_ip_1month_banned

    http-request sc-inc-gpc0(1) if tor_ip_24h_banned !tor_ip_1month_banned
    http-request sc-inc-gpc0(2) if tor_ip_24h_banned !tor_ip_1month_banned
    http-request deny deny_status 429 hdr Denial-Reason "This Tor exit relay was used in DDoS attack on this service. Do not make any further requests. This will only make things worse." if tor_ip_24h_banned

    # Block requests if either the connection rate or request rate limits are exceeded
    # Increment the gpc0 counter in the 24h ban stick table if the request is blocked
    http-request set-var(txn.ratelimited) str(RATE-LIMITED) if is_tor_exit_relay tor_request_rate_limit
    http-request set-var(txn.ratelimited) str(RATE-LIMITED) if is_tor_exit_relay tor_conn_rate_limit
    http-request set-var(txn.ratelimited) str(RATE-LIMITED) if is_tor_exit_relay tor_conn_count
    http-request capture var(txn.ratelimited) len 12        if is_tor_exit_relay tor_request_rate_limit
    http-request capture var(txn.ratelimited) len 12        if is_tor_exit_relay tor_conn_rate_limit
    http-request capture var(txn.ratelimited) len 12        if is_tor_exit_relay tor_conn_count

    # Check if the request was rate limited
    acl tor_request_rate_limited var(txn.ratelimited) -m found

    # Block requests if the request was rate limited and increment the gpc0 counter in the 24h ban stick table
    http-request sc-inc-gpc0(1) if tor_request_rate_limited
    http-request deny deny_status 429 hdr Denial-Reason "Exceeded rate limit. You had: %[sc0_conn_cur(st_tor_request_rate)] established connections, %[sc0_conn_rate(st_tor_request_rate)] connection rate and %[sc0_http_req_rate(st_tor_request_rate)] requests." if tor_request_rate_limited
    # ~ End of Tor exit relay nodes rules ~

    # Options
    option httplog
    option http-server-close
    option dontlognull

    log stdout format raw local1
    log-format "${HAP_LOG_FORMAT}"

    # Fetch stats from the primary Hockeypuck instance
    use_backend be_hockeypuck_primary if keyserver_host get_pks_lookup pks_op_stats METH_GET
    # Fetch recon hash queries from the primary Hockeypuck instance
    use_backend be_hockeypuck_primary if post_pks_hashquery METH_POST
    # Use cluster backend for all other requests
    use_backend be_hockeypuck         if keyserver_host get_pks_lookup METH_GET
    use_backend be_hockeypuck         if keyserver_host post_pks_delete METH_POST
    use_backend be_hockeypuck         if keyserver_host post_pks_replace METH_POST
    # Allow POST /pks/add requests from all IPs to the primary Hockeypuck instance
    use_backend be_hockeypuck_primary if keyserver_host post_pks_add METH_POST # TODO: Can we add without Host set?
    # Completely block POST /pks/add requests from Tor exit nodes
    #use_backend be_hockeypuck_primary if keyserver_host post_pks_add !is_tor_exit_relay METH_POST
    #use_backend be_tarpit            if keyserver_host post_pks_add is_tor_exit_relay METH_POST
    use_backend be_hockeypuck         if keyserver_host get_webroot !post_pks_add !post_pks_hashquery !post_pks_delete !post_pks_replace METH_GET

    # Block all other requests
    use_backend be_tarpit
