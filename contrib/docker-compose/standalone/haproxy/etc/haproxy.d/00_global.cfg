# Sample haproxy configuration for keyservers
# (c) Martin Dobrev, Andrew Gallagher 2023

# This file is optimised for hockeypuck's `docker-compose/standalone` deployment, however it is
# applicable to other deployments with minor edits to backend definitions and file paths.
#
# To facilitate portability, it has been parameterised using `envsubst` notation: $"{...}"
# You can populate these values at runtime by setting the appropriate environment variable.

# FQDN                  the FQDN of this server, note that aliases must also be configured
# CERTBOT_HOST_PORT     backend for ACME requests, in the form `host:port`
# PROMETHEUS_HOST_PORT  backend for prometheus monitoring, in the form `host:port`
# KEYSERVER_HOST_PORT   backend for the keyserver, in the form `host:port`
# HAP_CONF_DIR          location of config files
#                       normally `/etc/haproxy` for baremetal, `/usr/local/etc/haproxy` for docker
#                       it must have a subdir `lists` containing `blacklist.list` and `whitelist.list` (can be empty files)
# HAP_CACHE_DIR         persistent state store, must contain `tor_exit_relays.list` (refreshed externally)
# HAP_CERT_DIR          parent directory of SSL/TLS certificate directory
#                       it must contain a subdirectory named after the FQDN, itself containing `fullchain.pem` and `fullchain.pem.key`
#                       e.g. for letsencrypt this will be `/etc/letsencrypt/live`
# HAP_DHPARAM_FILE      Diffie-Hellman parameters for SSL/TLS

# Note that after the cache files or the SSL certs are updated externally, haproxy should be soft reloaded by sending it a HUP signal

global
    # Map threads to individual CPU cores. Assumes at least 2 available cores.
    cpu-map auto:1/1-2 0-1

    # generated 2022-10-15, Mozilla Guideline v5.6, HAProxy 2.4, OpenSSL 3.0.2, intermediate configuration
    # https://ssl-config.mozilla.org/#server=haproxy&version=2.4&config=intermediate&openssl=3.0.2&guideline=5.6
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    ssl-dh-param-file "${HAP_DHPARAM_FILE}"

    log stdout format raw local0

    # Allow maximum of 200 000 connections
    maxconn 200000

    tune.comp.maxlevel  5
    maxcompcpuusage     98

    # lower the record size to improve Time to First Byte (TTFB)
    tune.ssl.maxrecord  1419

    # Number of threads per process
    nbthread 12

    # Tune SSL cache size
    tune.ssl.cachesize 500000
    # Tune DH params
    tune.ssl.default-dh-param 2048 # TODO: Export as variable. Most systems use 2048 by default

    # Allow local admin socket
    stats socket "${HAP_CACHE_DIR}"/haproxy.admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s

    # Perform stateless reloads on HUP
    master-worker

    server-state-file "${HAP_CACHE_DIR}"/server-state
