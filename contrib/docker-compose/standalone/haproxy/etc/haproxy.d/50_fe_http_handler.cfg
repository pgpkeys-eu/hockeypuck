# Frontend to handle the actual HTTP requests
frontend fe_http_handler
    bind :80
    bind :::80

    # Loopback interface
    bind abns@loopback-http accept-proxy

    .if defined(HAP_DISABLE_SSL)
    .notice "fe_http_handler: Listening on port 11371 in single-mode HTTP; disabling HTTPS loopback listener"
    bind *:11371
    .else
    # Loopback interface for https
    bind abns@loopback-https accept-proxy ssl crt "${HAP_CERT_DIR}"/"${FQDN}"/fullchain.pem alpn h2,http/1.1
    .endif # HAP_DISABLE_SSL

    mode http

    # ~~ HAProxy LB Configuration ~~
    # Enable/Disable trust of Cloudflare and/or X-Forwarded-For headers
    #
    # By default HAProxy is running at the edge of your infrastructure
    # and picks the client IP from the TCP connection. If you are running
    # HAProxy behind a reverse proxy or Cloudflare, you need to enable
    # the following options to trust the headers.

    .if defined(HAP_BEHIND_CLOUDFLARE)
    .notice "fe_http_handler: Enabling Cloudflare support"
    http-request set-var(txn.cloudflare) str(ENABLED)
    .elseif defined(HAP_BEHIND_PROXY)
    .notice "fe_http_handler: Enabling reverse proxy support"
    http-request set-var(txn.cdn) str(ENABLED)
    .endif

    # HAProxy behind Cloudflare and/or a reverse proxy
    acl is_behind_cloudflare var(txn.cloudflare) -m found
    acl is_behind_proxy      var(txn.cdn) -m found

    # ~~ End HAProxy LB Configuration ~~

    # Host header is set
    acl is_host_set hdr(host) -m found

    # Instance is stopping
    acl is_stopping stopping eq 1

    # Match ACME challenge
    acl acme_challenge      path_beg /.well-known/acme-challenge/

    # Match Prometheus metrics
    acl get_prometheus      path_beg /monitoring/prometheus

    # .well-known/security.txt settings
    acl well_known_sec      path_beg -i /security.txt
    acl well_known_sec      path_beg -i /.well-known/security.txt

    # Check if requestor is blacklisted
    acl blacklisted         src -f "${HAP_CONF_DIR}"/lists/blacklist.list
    tcp-request connection  reject if blacklisted

    # Capture request headers
    capture request header Host len 253
    capture request header X-REQ-ID len 32
    capture request header X-Forwarded-For len 64
    capture request header Accept-Language len 64
    capture request header Referer len 64
    capture request header User-Agent len 128
    capture request header Content-Length len 10

    # Add the X-Forwarded-For header
    option forwardfor except 127.0.0.0/8

    # ~~~ DDoS protection ~~~
    # HAproxy tracks client IPs into a global stick table. Each IP is
    # stored for a limited amount of time, with several counters attached
    # to it. When a new connection comes in, the stick table is evaluated
    # to verify that the new connection from this client is allowed to
    # continue.
    tcp-request inspect-delay 5s

    # Enable tracking of counters for ip in the default stick-table, using CF-Connecting-IP or X-Forwarded-For
    acl HAS_CF_CONNECTING_IP hdr_cnt(CF-Connecting-IP) eq 1
    acl HAS_X_FORWARDED_FOR hdr_cnt(X-Forwarded-For) gt 0

    # Block invalid requests
    http-request deny deny_status 400 hdr Denial-Reason "No direct hits allowed. Missing X-Forwarded-For header" if is_behind_proxy !HAS_X_FORWARDED_FOR
    http-request deny deny_status 400 hdr Denial-Reason "No direct hits allowed. Missing headers" if is_behind_cloudflare !HAS_CF_CONNECTING_IP !HAS_X_FORWARDED_FOR

    # ~~ HAProxy client IP tracking ~~
    # Track requests from CF-Connecting-IP or X-Forwarded-For header, or source IP into the global ddos stick-table
    # Please see above for options to enable/disable tracking of client IPs from CF-Connecting-IP or X-Forwarded-For headers

    # Track CF-Connecting-IP header if present and behind Cloudflare
    tcp-request content track-sc0 hdr_ip(CF-Connecting-IP,-1) table st_global_ddos if HTTP HAS_CF_CONNECTING_IP is_behind_cloudflare
    http-request set-var(txn.clientIP) hdr_ip(CF-Connecting-IP,-1) if HTTP HAS_CF_CONNECTING_IP is_behind_cloudflare

    # Track X-Forwarded-For header if present and behind a proxy
    tcp-request content track-sc0 hdr_ip(X-Forwarded-For,-1) table st_global_ddos if HTTP HAS_X_FORWARDED_FOR is_behind_proxy
    http-request set-var(txn.clientIP) hdr_ip(X-Forwarded-For,-1) if HTTP HAS_X_FORWARDED_FOR is_behind_proxy

    # Track source IP
    tcp-request content track-sc0 src table st_global_ddos if HTTP !is_behind_cloudflare !is_behind_proxy
    http-request set-var(txn.clientIP) src if HTTP !is_behind_cloudflare !is_behind_proxy

    # Set CF-Connecting-IP header to the tracked client IP. All subsequent requests from this client will have this header set.
    # And all ACL rules in backends etc. must be evaluated against this header.
    http-request set-header CF-Connecting-IP %[var(txn.clientIP)]
    # ~~ End HAProxy client IP tracking ~~

    # Capture hockeypuck backend stats.
    http-request set-var(txn.hockeypuck_primary) nbsrv(be_hockeypuck_primary)
    http-request set-var(txn.hockeypuck)         nbsrv(be_hockeypuck)
    http-request capture var(txn.hockeypuck_primary) len 2
    http-request capture var(txn.hockeypuck)         len 2

    # Generic health monitor for umbrella LBs in enterprise deployments.
    acl BACKEND_DEAD nbsrv(be_hockeypuck) lt 1
    monitor-uri /_healthz
    monitor fail if BACKEND_DEAD

    # Set Host header if not set
    http-request set-header Host str("${FQDN}":%[dst_port]) if !is_host_set

    # Store Host header to construct Via response for keyserver backend
    http-request set-var(txn.serverName) req.hdr(host) if is_host_set

    # TARPIT the new connection if the client already has 80 opened
    http-request tarpit if { src_conn_cur(st_global_ddos) ge 80 }

    # TARPIT the new connection if the client has opened more than 40 connections in 3 seconds
    http-request tarpit if { src_conn_rate(st_global_ddos) ge 40 }

    # TARPIT the connection if the client has passed the HTTP error rate (10s)
    http-request tarpit if { sc0_http_err_rate(st_global_ddos) gt 20 }

    # TARPIT the connection if the client has passed the HTTP request rate (10s)
    http-request tarpit if { sc0_http_req_rate(st_global_ddos) gt 100 }

    # Whitelisting options
    http-request allow if { req.hdr_ip(CF-Connecting-IP,-1) -f "${HAP_CONF_DIR}"/lists/whitelist.list }

    # Options
    option httplog
    option http-server-close
    option dontlognull

    log stdout format raw local0
    log-format "%ci:%cp [%t] %ft %b/%s %Tq/%Tw/%Tc/%Tr/%Tt %ST %U/%B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

    # X-Forward- settings
    http-request    set-header X-Forwarded-Proto http  if !{ ssl_fc }
    http-request    set-header X-Forwarded-Proto https if { ssl_fc }
    http-request    set-header X-Forwarded-Host  %[req.hdr(host)] if is_host_set

    # HSTS response header
    http-response   set-header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" if { ssl_fc }

    # Secure response cookies
    http-response   replace-header Set-Cookie ^((?:.(?!\ [Ss]ecure))*)$ \1;\ Secure if { ssl_fc }

    # # Backend routing
    .if defined(HAP_DISABLE_CERTBOT)
    .notice "fe_http_handler: Disabling certbot front-end route"
    .else
    use_backend be_acme_challenge  if acme_challenge !is_stopping
    .endif # HAP_DISABLE_CERTBOT
    use_backend be_prometheus      if get_prometheus !is_stopping
    #use_backend be_well_known_sec  if well_known_sec

    default_backend be_hockeypuck_rewrite
